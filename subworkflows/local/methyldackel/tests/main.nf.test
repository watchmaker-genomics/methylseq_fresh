nextflow_workflow {

    name "Test Workflow METHYLDACKEL"
    script "../main.nf"
    workflow "METHYLDACKEL"
    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "methyldackel"
    tag "subworkflows/methyldackel"
    tag "methyldackel/extract"
    tag "methyldackel/mbias"

    test("test_methyldackel_single_end_bam") {

        when {
            workflow {
                """
                ch_alignment = Channel.of([
                    [ id:'test', single_end:true ], 
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true)
                ])
                ch_alignment_index = Channel.of([
                    [ id:'test', single_end:true ], 
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam.bai', checkIfExists: true)
                ])
                ch_fasta = Channel.of([
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                ch_fasta_index = Channel.of([
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.methydackel_extract_bedgraph,
                    workflow.out.methydackel_extract_methylkit,
                    workflow.out.methydackel_mbias,
                    workflow.out.multiqc,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("test_methyldackel_paired_end_bam") {

        when {
            workflow {
                """
                ch_alignment = Channel.of([
                    [ id:'test', single_end:false ], 
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ])
                ch_alignment_index = Channel.of([
                    [ id:'test', single_end:false ], 
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                ch_fasta = Channel.of([
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                ch_fasta_index = Channel.of([
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.methydackel_extract_bedgraph,
                    workflow.out.methydackel_extract_methylkit,
                    workflow.out.methydackel_mbias,
                    workflow.out.multiqc,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("test_methyldackel_single_end_bam - stub") {

        options "-stub"

        when {
            workflow {
                """
                ch_alignment = Channel.of([
                    [ id:'test', single_end:true ], 
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam', checkIfExists: true)
                ])
                ch_alignment_index = Channel.of([
                    [ id:'test', single_end:true ], 
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.single_end.sorted.bam.bai', checkIfExists: true)
                ])
                ch_fasta = Channel.of([
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                ch_fasta_index = Channel.of([
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("test_methyldackel_paired_end_bam - stub") {

        options "-stub"

        when {
            workflow {
                """
                ch_alignment = Channel.of([
                    [ id:'test', single_end:false ], 
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ])
                ch_alignment_index = Channel.of([
                    [ id:'test', single_end:false ], 
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                ch_fasta = Channel.of([
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                ch_fasta_index = Channel.of([
                    [ id:'genome' ],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }
}
